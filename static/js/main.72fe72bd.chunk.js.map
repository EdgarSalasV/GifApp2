{"version":3,"sources":["components/AddCategory.jsx","Helpers/GetGifs.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","Categories","ReactDOM","render","document","getElementById"],"mappings":"mMAoCeA,EAjCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAiBrC,OACQ,sBAAMC,SAVO,SAAAC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAKd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAcZM,GAdY,4CAAH,sDCGPO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAIlC,OAFAc,QAAQC,IAAIN,EAAGC,EAAMV,GAGjB,sBAAKgB,UAAU,qEAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAIA,QC0BDS,EAhCC,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDJ,SAAEA,GAAc,MAGdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAL2B,mBAGjCC,EAHiC,KAG1BC,EAH0B,KA0BxC,OAfAC,qBAAW,WAEP1B,EAASC,GAEJ0B,MAAM,SAAAC,GAECH,EAAS,CACLjB,KAAMoB,EACNL,SAAQ,SAK1B,CAAEtB,IAEGuB,EDrB2BK,CAAc5B,GAAxCsB,EAJoB,EAIpBA,QAAeT,EAJK,EAIVN,KAGlB,OACI,qCACI,oBAAIW,UAAU,8BAAd,SAA+ClB,IAE9CsB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAGQL,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEUtBkB,EA5BM,WAAO,IAAD,EAEW3C,mBAAS,IAFpB,mBAElB4C,EAFkB,KAEN7C,EAFM,KASzB,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEI6C,EAAWrB,KAAI,SAACT,GAAD,OACb,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCjBjB+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.72fe72bd.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value)\r\n    }\r\n    \r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 1){\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setinputValue('')\r\n        }\r\n\r\n    }\r\n    return (\r\n            <form onSubmit = {handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={ handleInputChange }\r\n                />\r\n            </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default AddCategory\r\n","export const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=US6H7KOAhcEkbqDS3O4ABr14rZhWeUQV&limit=10`\r\n\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs\r\n}","import React from 'react'\r\n\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n    console.log(id,title,url)\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce animate__lightSpeedOutRight\">\r\n            <img src={ url } alt ={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    // haciendo el llamado al C.Hook y mandandole valores\r\n    // en este caso category ,a la vez recibiendo l y d \r\n    const { loading , data:images } = useFetchGifs( category )\r\n\r\n    // linea 16 la carga\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__lightSpeedOutRight\" >{ category }</h3>\r\n\r\n            {loading && <p>Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n            \r\n                {\r\n                    images.map( (img) =>(\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                          />\r\n                    )\r\n                    )\r\n                }\r\n                \r\n            </div>\r\n            </>\r\n    )\r\n    }\r\n    // linea 21 la devolucion de imagenes \r\n\r\n\r\nexport default GifGrid\r\n","import { useState , useEffect } from \"react\";\r\nimport { getGifs } from '../Helpers/GetGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    // parte de carga lo que normalmente se cambiara sera el state\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //aqui hacemos el llamado a la funcion para que no haya\r\n    // problemas al momento de que haya alteraciones en la pagina\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            //aqui recibe el url y luego nos lo devuelve\r\n            .then( imgs => {               \r\n                    //Aqui le damos nuevos valores\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading:false\r\n                    })\r\n\r\n            })\r\n            //es necesario tener el valor que sufrira alteraciones aqui\r\n    },[ category ] )\r\n\r\n    return state; //{data:[], loading: true};\r\n}","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [Categories, setCategories] = useState([]);\r\n\r\n//   const handleAdd = () => {\r\n//     setCategories([...Categories, \"oa asdqwe qowrmoqwm oqwem qpwmepo qmwe mq\"]);\r\n//     console.log(Categories);\r\n//   };\r\n\r\n  return (\r\n    <div>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={ setCategories } />\r\n      <hr />\r\n\r\n      <ol>\r\n        {\r\n          Categories.map((category) =>(\r\n            <GifGrid \r\n            key={category}\r\n            category={category}\r\n            />\r\n          ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <GifExpertApp />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}